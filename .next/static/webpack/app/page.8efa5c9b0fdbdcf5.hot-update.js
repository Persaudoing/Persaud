"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/birdeye.ts":
/*!******************************!*\
  !*** ./src/utils/birdeye.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrendingTokens: function() { return /* binding */ getTrendingTokens; }\n/* harmony export */ });\nfunction getBirdeyeApiKey() {\n    const apiKey = \"your_birdeye_api_key\";\n    if (!apiKey) {\n        throw new Error(\"BIRDEYE_API_KEY is not configured\");\n    }\n    return apiKey;\n}\nasync function getTrendingTokens() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    try {\n        const response = await fetch(\"https://public-api.birdeye.so/defi/tokenlist?sort_by=v24hChangePercent&sort_type=desc&offset=0&limit=\".concat(limit), {\n            headers: {\n                \"accept\": \"application/json\",\n                \"x-chain\": \"solana\",\n                \"X-API-KEY\": getBirdeyeApiKey()\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!data.success) {\n            throw new Error(\"Birdeye API request failed\");\n        }\n        return data.data.tokens;\n    } catch (error) {\n        console.error(\"Error fetching Birdeye trending tokens:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9iaXJkZXllLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFzQkEsU0FBU0E7SUFDUCxNQUFNQyxTQUFTQyxzQkFBdUM7SUFDdEQsSUFBSSxDQUFDRCxRQUFRO1FBQ1gsTUFBTSxJQUFJSSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0o7QUFDVDtBQUVPLGVBQWVLO1FBQWtCQyxRQUFBQSxpRUFBZ0I7SUFDdEQsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFDckIsd0dBQThHLE9BQU5GLFFBQ3hHO1lBQ0VHLFNBQVM7Z0JBQ1AsVUFBVTtnQkFDVixXQUFXO2dCQUNYLGFBQWFWO1lBQ2Y7UUFDRjtRQUdGLElBQUksQ0FBQ1EsU0FBU0csRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSU4sTUFBTSx1QkFBdUMsT0FBaEJHLFNBQVNJLE1BQU07UUFDeEQ7UUFFQSxNQUFNQyxPQUFPLE1BQU1MLFNBQVNNLElBQUk7UUFFaEMsSUFBSSxDQUFDRCxLQUFLRSxPQUFPLEVBQUU7WUFDakIsTUFBTSxJQUFJVixNQUFNO1FBQ2xCO1FBRUEsT0FBT1EsS0FBS0EsSUFBSSxDQUFDRyxNQUFNO0lBQ3pCLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMkNBQTJDQTtRQUN6RCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2JpcmRleWUudHM/ZWJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQmlyZGV5ZVRva2VuIHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nO1xuICBkZWNpbWFsczogbnVtYmVyO1xuICBsb2dvVVJJOiBzdHJpbmc7XG4gIGxpcXVpZGl0eTogbnVtYmVyO1xuICB2MjRoQ2hhbmdlUGVyY2VudDogbnVtYmVyO1xuICB2MjRoVVNEOiBudW1iZXI7XG4gIG1jOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBCaXJkZXllUmVzcG9uc2Uge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBkYXRhOiB7XG4gICAgdXBkYXRlVW5peFRpbWU6IG51bWJlcjtcbiAgICB1cGRhdGVUaW1lOiBzdHJpbmc7XG4gICAgdG9rZW5zOiBCaXJkZXllVG9rZW5bXTtcbiAgICB0b3RhbDogbnVtYmVyO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRCaXJkZXllQXBpS2V5KCk6IHN0cmluZyB7XG4gIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JJUkRFWUVfQVBJX0tFWTtcbiAgaWYgKCFhcGlLZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JJUkRFWUVfQVBJX0tFWSBpcyBub3QgY29uZmlndXJlZCcpO1xuICB9XG4gIHJldHVybiBhcGlLZXk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmVuZGluZ1Rva2VucyhsaW1pdDogbnVtYmVyID0gMTApOiBQcm9taXNlPEJpcmRleWVUb2tlbltdPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwczovL3B1YmxpYy1hcGkuYmlyZGV5ZS5zby9kZWZpL3Rva2VubGlzdD9zb3J0X2J5PXYyNGhDaGFuZ2VQZXJjZW50JnNvcnRfdHlwZT1kZXNjJm9mZnNldD0wJmxpbWl0PSR7bGltaXR9YCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ3gtY2hhaW4nOiAnc29sYW5hJyxcbiAgICAgICAgICAnWC1BUEktS0VZJzogZ2V0QmlyZGV5ZUFwaUtleSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkgYXMgQmlyZGV5ZVJlc3BvbnNlO1xuXG4gICAgaWYgKCFkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmlyZGV5ZSBBUEkgcmVxdWVzdCBmYWlsZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5kYXRhLnRva2VucztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBCaXJkZXllIHRyZW5kaW5nIHRva2VuczonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0iXSwibmFtZXMiOlsiZ2V0QmlyZGV5ZUFwaUtleSIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19CSVJERVlFX0FQSV9LRVkiLCJFcnJvciIsImdldFRyZW5kaW5nVG9rZW5zIiwibGltaXQiLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm9rIiwic3RhdHVzIiwiZGF0YSIsImpzb24iLCJzdWNjZXNzIiwidG9rZW5zIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/birdeye.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/helius.ts":
/*!*****************************!*\
  !*** ./src/utils/helius.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSolanaBalance: function() { return /* binding */ getSolanaBalance; },\n/* harmony export */   getTransactionDetails: function() { return /* binding */ getTransactionDetails; }\n/* harmony export */ });\n/* harmony import */ var _coingecko__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./coingecko */ \"(app-pages-browser)/./src/utils/coingecko.ts\");\n\nfunction getHeliusRpcUrl() {\n    const apiKey = \"a0a75c78-7525-4654-a101-a61f889a6873\";\n    if (!apiKey) {\n        throw new Error(\"HELIUS_API_KEY is not configured\");\n    }\n    return \"https://mainnet.helius-rpc.com/?api-key=\".concat(apiKey);\n}\nconst rateLimiter = {\n    lastRequest: 0,\n    minInterval: 100,\n    async throttle () {\n        const now = Date.now();\n        const timeSinceLastRequest = now - this.lastRequest;\n        if (timeSinceLastRequest < this.minInterval) {\n            await new Promise((resolve)=>setTimeout(resolve, this.minInterval - timeSinceLastRequest));\n        }\n        this.lastRequest = Date.now();\n    }\n};\nasync function getSolanaBalance(address) {\n    if (!address) {\n        throw new Error(\"Address is required\");\n    }\n    await rateLimiter.throttle();\n    try {\n        var _data_result;\n        const heliusUrl = getHeliusRpcUrl();\n        const response = await fetch(heliusUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: \"balance-request\",\n                method: \"getBalance\",\n                params: [\n                    address\n                ]\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.error) {\n            throw new Error(\"Helius API error: \".concat(data.error.message));\n        }\n        const balanceInSOL = Number(((_data_result = data.result) === null || _data_result === void 0 ? void 0 : _data_result.value) || 0) / 1e9;\n        // Get SOL price using existing utility\n        const [priceData] = await Promise.all([\n            (0,_coingecko__WEBPACK_IMPORTED_MODULE_0__.getSolanaPrice)()\n        ]);\n        return {\n            balance: balanceInSOL,\n            balanceInUSD: balanceInSOL * priceData.price\n        };\n    } catch (error) {\n        console.error(\"Error in getSolanaBalance:\", error);\n        throw error;\n    }\n}\nasync function getTransactionDetails(signature) {\n    await rateLimiter.throttle();\n    try {\n        var _tx_meta_postTokenBalances, _tx_meta, _tx_meta_preTokenBalances, _tx_meta1, _tx_meta2, _tx_meta3, _tx_meta_postBalances, _tx_meta4, _tx_meta_preBalances, _tx_meta5, _tx_meta6, _tx_transaction_message_accountKeys, _tx_transaction_message, _tx_transaction, _tx_transaction_message_accountKeys1, _tx_transaction_message1, _tx_transaction1;\n        const heliusUrl = getHeliusRpcUrl();\n        const response = await fetch(heliusUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: \"tx-request\",\n                method: \"getTransaction\",\n                params: [\n                    signature,\n                    {\n                        encoding: \"jsonParsed\",\n                        maxSupportedTransactionVersion: 0\n                    }\n                ]\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.error) {\n            throw new Error(\"Helius API error: \".concat(data.error.message));\n        }\n        const tx = data.result;\n        if (!tx) {\n            throw new Error(\"Transaction not found\");\n        }\n        // Parse token transfers with better detection\n        let tokenTransfer;\n        if (((_tx_meta = tx.meta) === null || _tx_meta === void 0 ? void 0 : (_tx_meta_postTokenBalances = _tx_meta.postTokenBalances) === null || _tx_meta_postTokenBalances === void 0 ? void 0 : _tx_meta_postTokenBalances.length) > 0 || ((_tx_meta1 = tx.meta) === null || _tx_meta1 === void 0 ? void 0 : (_tx_meta_preTokenBalances = _tx_meta1.preTokenBalances) === null || _tx_meta_preTokenBalances === void 0 ? void 0 : _tx_meta_preTokenBalances.length) > 0) {\n            const postBalances = tx.meta.postTokenBalances || [];\n            const preBalances = tx.meta.preTokenBalances || [];\n            for(let i = 0; i < Math.max(postBalances.length, preBalances.length); i++){\n                const postBalance = postBalances[i];\n                const preBalance = preBalances.find((pre)=>pre.accountIndex === (postBalance === null || postBalance === void 0 ? void 0 : postBalance.accountIndex));\n                if ((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount) && (preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount)) {\n                    const amount = Math.abs((postBalance.uiTokenAmount.uiAmount || 0) - (preBalance.uiTokenAmount.uiAmount || 0));\n                    if (amount > 0) {\n                        var _tx_transaction_message_accountKeys2, _tx_transaction_message2, _tx_transaction2;\n                        const tokenAddress = (_tx_transaction2 = tx.transaction) === null || _tx_transaction2 === void 0 ? void 0 : (_tx_transaction_message2 = _tx_transaction2.message) === null || _tx_transaction_message2 === void 0 ? void 0 : (_tx_transaction_message_accountKeys2 = _tx_transaction_message2.accountKeys) === null || _tx_transaction_message_accountKeys2 === void 0 ? void 0 : _tx_transaction_message_accountKeys2[postBalance.accountIndex];\n                        tokenTransfer = {\n                            amount,\n                            symbol: postBalance.uiTokenAmount.uiTokenSymbol || \"\",\n                            tokenAddress\n                        };\n                        break;\n                    }\n                }\n            }\n        }\n        return {\n            type: ((_tx_meta2 = tx.meta) === null || _tx_meta2 === void 0 ? void 0 : _tx_meta2.type) || \"Unknown\",\n            timestamp: new Date(tx.blockTime * 1000).toLocaleString(),\n            status: ((_tx_meta3 = tx.meta) === null || _tx_meta3 === void 0 ? void 0 : _tx_meta3.err) ? \"Failed\" : \"Success\",\n            amount: (((_tx_meta4 = tx.meta) === null || _tx_meta4 === void 0 ? void 0 : (_tx_meta_postBalances = _tx_meta4.postBalances) === null || _tx_meta_postBalances === void 0 ? void 0 : _tx_meta_postBalances[0]) || 0) - (((_tx_meta5 = tx.meta) === null || _tx_meta5 === void 0 ? void 0 : (_tx_meta_preBalances = _tx_meta5.preBalances) === null || _tx_meta_preBalances === void 0 ? void 0 : _tx_meta_preBalances[0]) || 0),\n            fee: ((_tx_meta6 = tx.meta) === null || _tx_meta6 === void 0 ? void 0 : _tx_meta6.fee) ? tx.meta.fee / 1e9 : undefined,\n            sender: (_tx_transaction = tx.transaction) === null || _tx_transaction === void 0 ? void 0 : (_tx_transaction_message = _tx_transaction.message) === null || _tx_transaction_message === void 0 ? void 0 : (_tx_transaction_message_accountKeys = _tx_transaction_message.accountKeys) === null || _tx_transaction_message_accountKeys === void 0 ? void 0 : _tx_transaction_message_accountKeys[0],\n            receiver: (_tx_transaction1 = tx.transaction) === null || _tx_transaction1 === void 0 ? void 0 : (_tx_transaction_message1 = _tx_transaction1.message) === null || _tx_transaction_message1 === void 0 ? void 0 : (_tx_transaction_message_accountKeys1 = _tx_transaction_message1.accountKeys) === null || _tx_transaction_message_accountKeys1 === void 0 ? void 0 : _tx_transaction_message_accountKeys1[1],\n            tokenTransfer\n        };\n    } catch (error) {\n        console.error(\"Error fetching transaction details:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/helius.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/wallet.ts":
/*!*****************************!*\
  !*** ./src/utils/wallet.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentWallet: function() { return /* binding */ AgentWallet; },\n/* harmony export */   agentWallet: function() { return /* binding */ agentWallet; }\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../../node_modules/process/browser.js\");\n\nclass AgentWallet {\n    async getActiveConnection() {\n        if (!this.isUsingFallback) {\n            try {\n                if (!this.primaryConnection) {\n                    throw new Error(\"Primary connection not initialized\");\n                }\n                await this.primaryConnection.getSlot();\n                return this.primaryConnection;\n            } catch (error) {\n                console.warn(\"Primary RPC failed, switching to fallback:\", error);\n                this.isUsingFallback = true;\n            }\n        }\n        if (!this.fallbackConnection) {\n            throw new Error(\"Fallback connection not initialized\");\n        }\n        try {\n            await this.fallbackConnection.getSlot();\n            return this.fallbackConnection;\n        } catch (error) {\n            console.error(\"Both RPC connections failed:\", error);\n            throw new Error(\"No available RPC connection\");\n        }\n    }\n    async getBalance() {\n        const maxRetries = 3;\n        let retryCount = 0;\n        while(retryCount < maxRetries){\n            try {\n                const response = await fetch(\"\".concat(this.baseUrl, \"/api/wallet\"), {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to get wallet balance\");\n                }\n                return await response.json();\n            } catch (error) {\n                retryCount++;\n                if (retryCount === maxRetries) {\n                    console.error(\"Error getting wallet balance after retries:\", error);\n                    throw error;\n                }\n                // Wait before retrying\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            }\n        }\n        throw new Error(\"Failed to get wallet balance after retries\");\n    }\n    async sendSOL(recipient, amount) {\n        try {\n            const connection = await this.getActiveConnection();\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/wallet/send\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    recipient,\n                    amount,\n                    rpcUrl: this.isUsingFallback ? \"helius\" : \"quicknode\"\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to send transaction\");\n            }\n            return response.json();\n        } catch (error) {\n            console.error(\"Error sending SOL:\", error);\n            throw error;\n        }\n    }\n    async signAndSendTransaction(transaction) {\n        try {\n            const connection = await this.getActiveConnection();\n            const serializedTransaction = Buffer.from(transaction.serialize()).toString(\"base64\");\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/wallet/sign\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    transaction: serializedTransaction,\n                    rpcUrl: this.isUsingFallback ? \"helius\" : \"quicknode\"\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Failed to sign and send transaction\");\n            }\n            const result = await response.json();\n            return result.signature;\n        } catch (error) {\n            console.error(\"Error signing transaction:\", error);\n            throw error;\n        }\n    }\n    async getAddress() {\n        const walletInfo = await this.getBalance();\n        return walletInfo.address;\n    }\n    constructor(){\n        this.primaryConnection = null;\n        this.fallbackConnection = null;\n        this.isUsingFallback = false;\n        const quickNodeUrl = \"your_quicknode_rpc_url\";\n        const heliusApiKey = \"a0a75c78-7525-4654-a101-a61f889a6873\";\n        if (!quickNodeUrl && !heliusApiKey) {\n            throw new Error(\"Missing RPC configuration\");\n        }\n        // Initialize QuickNode as primary if available\n        if (quickNodeUrl) {\n            this.primaryConnection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(quickNodeUrl, \"confirmed\");\n        }\n        // Initialize Helius as fallback\n        if (heliusApiKey) {\n            this.fallbackConnection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(\"https://mainnet.helius-rpc.com/?api-key=\".concat(heliusApiKey), \"confirmed\");\n        }\n        // If QuickNode isn't available, use Helius as primary\n        if (!quickNodeUrl && heliusApiKey) {\n            this.primaryConnection = this.fallbackConnection;\n        }\n        // Use appropriate base URL depending on environment\n        this.baseUrl = process.env.BOT_API_BASE_URL || process.env.NEXT_PUBLIC_API_BASE_URL || \"http://localhost:3000\";\n    }\n}\n// Export a singleton instance\nconst agentWallet = new AgentWallet();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/wallet.ts\n"));

/***/ })

});